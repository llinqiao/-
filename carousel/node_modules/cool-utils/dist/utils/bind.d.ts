declare type KeyName = 'enter' | 'tab' | 'delete' | 'esc' | 'space' | 'up' | 'down' | 'left' | 'right';
declare type MouseName = 'left' | 'right' | 'middle';
declare type SequenceVal = 'once' | 'stop' | 'prevent' | 'key' | 'mouse';
declare type EventHandlerConf = {
    /**
     * 是否只调用一次
     */
    once?: boolean;
    /**
     * TODO
     * 指定这些检测的顺序
     */
    sequence?: SequenceVal[];
    /**
     * 是否尝试用Event.target.value取代Event
     */
    trimEvent?: boolean;
    /**
     * 当trimEvent为true时，指定Event参数的顺序，默认为0
     */
    eventIndex?: number;
    /**
     * 是否阻止事件冒泡，即调用Event.stopPropagation
     */
    stop?: boolean;
    /**
     * // TODO self
     * 只当在 event.target 是当前元素自身时触发处理函数
     * 即事件不是从内部元素触发的
     */
    self?: boolean;
    /**
     * 是否阻止默认行为，即调用Event.preventDefault
     */
    prevent?: boolean;
    /**
     * TODO
     * 如果为键盘事件，可以控制键盘事件的触发
     */
    key?: {
        /**
         * 指定只有某些keyCode才会触发事件
         */
        keyCode?: number | number[];
        keyName?: KeyName | KeyName[];
        ctrl?: boolean;
        alt?: boolean;
        shift?: boolean;
        /**
         * 注意：在 Mac 系统键盘上，meta 对应 command 键 (⌘)。
         * 在 Windows 系统键盘 meta 对应 Windows 徽标键 (⊞)。
         * 在 Sun 操作系统键盘上，meta 对应实心宝石键 (◆)。
         * 在其他特定键盘上，尤其在 MIT 和 Lisp 机器的键盘、以及其后继产品，比如 Knight 键盘、space-cadet 键盘，meta 被标记为“META”。在 Symbolics 键盘上，meta 被标记为“META”或者“Meta”。
         */
        meta?: boolean;
        exact?: boolean;
    };
    /**
     * TODO
     * 如果为鼠标事件，可以控制哪个按键按下式，才会触发
     */
    mouse?: MouseName;
};
declare type Bind = {
    /**
     * 给对象的方法，绑定到this，是的将方法当做参数传递时，可以解决this引用的问题
     */
    (eventHandlerConf?: EventHandlerConf): ((target: any, fieldKey: string, desc: PropertyDescriptor) => void);
    /**
     * 获取到绑定后的处理函数
     * @param arg 可以同时绑定一个参数，解决react循环时，参数问题
     */
    handler: (fn: any, arg?: string | number | boolean) => any;
};
/**
 * 给对象的方法，绑定到this，是的将方法当做参数传递时，可以解决this引用的问题
 */
export declare const bind: Bind;
export {};
